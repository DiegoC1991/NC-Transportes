<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Importar e Gerenciar Excel</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
    }
    table, th, td {
      border: 1px solid black;
    }
    th, td {
      padding: 10px;
      text-align: left;
    }
    .button-container {
      margin: 10px 0;
    }
    .action-buttons button {
      margin-right: 5px;
    }
    #filter-input, #start-date, #end-date {
      margin: 10px 5px;
      padding: 5px;
      font-size: 14px;
    }
    #header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    #date-time {
      font-size: 16px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div id="header">
    <h1>Importar e Gerenciar Excel</h1>
    <div id="date-time"></div>
  </div>

  <div class="button-container">
    <input type="file" id="upload" accept=".xlsx, .xls" />
    <button onclick="saveData()">Salvar</button>
    <button onclick="clearData()">Excluir Tudo</button>
    <button onclick="openSettings()">Configurações</button>
  </div>

  <!-- Campos para filtro -->
  <input 
    type="text" 
    id="filter-input" 
    placeholder="Digite um número ou texto para filtrar" 
    oninput="filterTable()" 
  />
  <input 
    type="date" 
    id="start-date" 
    placeholder="Data inicial" 
    onchange="filterTableByDate()" 
  />
  <input 
    type="date" 
    id="end-date" 
    placeholder="Data final" 
    onchange="filterTableByDate()" 
  />

  <table id="data-table">
    <thead>
      <tr id="table-header"></tr>
    </thead>
    <tbody id="table-body"></tbody>
  </table>

  <script>
    const uploadInput = document.getElementById('upload');
    const tableHeader = document.getElementById('table-header');
    const tableBody = document.getElementById('table-body');
    const filterInput = document.getElementById('filter-input');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const dateTimeElement = document.getElementById('date-time');
    const localStorageKey = 'excelData';

    // Função para atualizar a data e hora no cabeçalho
    function updateDateTime() {
      const now = new Date();
      const date = now.toLocaleDateString('pt-BR');
      const time = now.toLocaleTimeString('pt-BR');
      dateTimeElement.textContent = `${date} ${time}`;
    }

    // Atualizar a data e hora a cada segundo
    setInterval(updateDateTime, 1000);

    // Função para carregar dados do localStorage
    function loadData() {
      const savedData = localStorage.getItem(localStorageKey);
      if (savedData) {
        renderTable(JSON.parse(savedData));
      }
    }

    // Função para renderizar a tabela
    function renderTable(data) {
      tableHeader.innerHTML = '';
      tableBody.innerHTML = '';

      if (data.length > 0) {
        // Cabeçalho da tabela
        Object.keys(data[0]).forEach((key) => {
          const th = document.createElement('th');
          th.textContent = key;
          tableHeader.appendChild(th);
        });
        const thActions = document.createElement('th');
        thActions.textContent = 'Ações';
        tableHeader.appendChild(thActions);

        // Corpo da tabela
        data.forEach((row, rowIndex) => {
          const tr = document.createElement('tr');
          Object.values(row).forEach((value) => {
            const td = document.createElement('td');
            td.contentEditable = true; // Permitir edição direta
            td.textContent = value;
            tr.appendChild(td);
          });

          // Coluna Status
          const tdStatus = document.createElement('td');
          const statusDate = new Date(row["Data 3"]); // Supondo que a terceira coluna seja "Data 3"
          const today = new Date();

          if (statusDate >= today) {
            tdStatus.textContent = "NO PRAZO";
            tdStatus.style.backgroundColor = "green";
            tdStatus.style.color = "white";
          } else {
            tdStatus.textContent = "EM ATRASO";
            tdStatus.style.backgroundColor = "red";
            tdStatus.style.color = "white";
          }

          tr.appendChild(tdStatus);

          // Adicionar coluna de ações
          const tdActions = document.createElement('td');
          tdActions.classList.add('action-buttons');

          // Botão de excluir linha
          const deleteBtn = document.createElement('button');
          deleteBtn.textContent = 'Excluir';
          deleteBtn.onclick = () => deleteRow(rowIndex);

          // Botão de editar linha
          const editBtn = document.createElement('button');
          editBtn.textContent = 'Salvar Alterações';
          editBtn.onclick = () => saveRow(rowIndex, tr);

          tdActions.appendChild(editBtn);
          tdActions.appendChild(deleteBtn);
          tr.appendChild(tdActions);

          tableBody.appendChild(tr);
        });
      }
    }

    // Função para processar o arquivo Excel
    uploadInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          renderTable(jsonData);
        };
        reader.readAsArrayBuffer(file);
      }
    });

    // Função para salvar os dados no localStorage
    function saveData() {
      const rows = [];
      tableBody.querySelectorAll('tr').forEach((tr) => {
        const cells = tr.querySelectorAll('td');
        const row = {};
        tableHeader.querySelectorAll('th').forEach((th, index) => {
          if (index < cells.length) {
            row[th.textContent] = cells[index]?.textContent || '';
          }
        });
        rows.push(row);
      });
      localStorage.setItem(localStorageKey, JSON.stringify(rows));
      alert('Dados salvos com sucesso!');
    }

    // Função para excluir uma linha específica
    function deleteRow(rowIndex) {
      const data = JSON.parse(localStorage.getItem(localStorageKey)) || [];
      data.splice(rowIndex, 1);
      localStorage.setItem(localStorageKey, JSON.stringify(data));
      loadData();
    }

    // Função para salvar alterações de uma linha específica
    function saveRow(rowIndex, tr) {
      const data = JSON.parse(localStorage.getItem(localStorageKey)) || [];
      const updatedRow = {};
      const cells = tr.querySelectorAll('td');
      tableHeader.querySelectorAll('th').forEach((th, index) => {
        if (index < cells.length) {
          updatedRow[th.textContent] = cells[index]?.textContent || '';
        }
      });
      data[rowIndex] = updatedRow;
      localStorage.setItem(localStorageKey, JSON.stringify(data));
      alert('Linha atualizada com sucesso!');
    }

    // Função para filtrar a tabela por texto
    function filterTable() {
      const filter = filterInput.value.toLowerCase();
      const rows = tableBody.querySelectorAll('tr');

      rows.forEach((row) => {
        const cells = row.querySelectorAll('td');
        let match = false;

        cells.forEach((cell) => {
          if (cell.textContent.toLowerCase().includes(filter)) {
            match = true;
          }
        });

        row.style.display = match ? '' : 'none';
      });
    }

    // Função para filtrar a tabela por período de datas
    function filterTableByDate() {
      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);
      const rows = tableBody.querySelectorAll('tr');

      rows.forEach((row) => {
        const cells = row.querySelectorAll('td');
        let dateFound = false;

        cells.forEach((cell) => {
          const cellDate = new Date(cell.textContent);
          if (cellDate >= startDate && cellDate <= endDate) {
            dateFound = true;
          }
        });

        row.style.display = dateFound ? '' : 'none';
      });
    }

    // Função para abrir a tela de configurações
    function openSettings() {
      const settingsPage = `
        <html>
          <head>
            <title>Configurações</title>
          </head>
          <body>
            <h1>Configurações</h1>
            <label for="cnpj">Cadastro de CNPJ:</label>
            <input type="text" id="cnpj" value="${localStorage.getItem('cnpj') || ''}" placeholder="Digite o CNPJ" />
            <br><br>
            <label for="logo-upload">Cadastro de Logo:</label>
            <input type="file" id="logo-upload" />
            <br><br>
            <label for="header-name">Nome do Cabeçalho:</label>
            <input type="text" id="header-name" value="${localStorage.getItem('header-name') || ''}" />
            <br><br>
            <button onclick="saveSettings()">Salvar Configurações</button>
            <button onclick="window.close()">Fechar</button>
          </body>
        </html>
      `;
      const newWindow = window.open('', '', 'width=600,height=400');
      newWindow.document.write(settingsPage);
    }

    // Função para salvar as configurações
    function saveSettings() {
      const cnpj = document.getElementById('cnpj').value;
      const logo = document.getElementById('logo-upload').files[0];
      const headerName = document.getElementById('header-name').value;

      localStorage.setItem('cnpj', cnpj);
      localStorage.setItem('logo', logo ? logo.name : '');
      localStorage.setItem('header-name', headerName);

      alert('Configurações salvas com sucesso!');
    }

    // Carregar dados ao iniciar
    loadData();
  </script>
</body>
</html>
